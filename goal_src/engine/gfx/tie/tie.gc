;;-*-Lisp-*-
(in-package goal)

;; name: tie.gc
;; name in dgo: tie
;; dgos: GAME, ENGINE

;;;;;;;;;;;;;;;;;
;; Basic Methods
;;;;;;;;;;;;;;;;;

;; something is going wrong mem-usage

(defmethod login tie-fragment ((obj tie-fragment))
  "Initialize the shaders for a tie-fragment"
  
  ;; the gif data is just adgif shaders, each are 5 qw's
  (let ((s5-0 (-> obj gif-ref))
        (s4-0 (/ (-> obj tex-count) (the-as uint 5)))
        )
    (dotimes (s3-0 (the-as int s4-0))
      ;; will modify the adgif-shaders in place to have the appropriate tbp.
      (adgif-shader-login-no-remap (-> s5-0 s3-0))
      )
    )
  obj
  )

(defmethod inspect drawable-inline-array-instance-tie ((obj drawable-inline-array-instance-tie))
  "Inspect an array of instances"
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tlength: ~D~%" (-> obj length))
  (format #t "~Tdata[~D]: @ #x~X~%" (-> obj length) (-> obj data))
  (dotimes (s5-0 (-> obj length))
    (format #t "~T  [~D] ~A~%" s5-0 (-> obj data s5-0))
    )
  obj
  )

(defmethod asize-of drawable-inline-array-instance-tie ((obj drawable-inline-array-instance-tie))
  "Compute the size in memory of an array of instances."
  (the-as int (+ (-> drawable-inline-array-instance-tie size)
                 (* (+ (-> obj length) -1) 64) ;; 64 bytes / fragment
                 )
          )
  )

#|
(defmethod login drawable-tree-instance-tie ((obj drawable-tree-instance-tie))
obj
)
|#

(defmethod login drawable-tree-instance-tie ((obj drawable-tree-instance-tie))
  "Login method for the tie tree."
  (dotimes (s5-0 (-> obj length))
    (login (-> obj data s5-0))
    )
  (the-as drawable-tree-instance-tie #f)
  )

(defmethod inspect prototype-tie ((obj prototype-tie))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tlength: ~D~%" (-> obj length))
  (format #t "~Tdata[~D]: @ #x~X~%" (-> obj length) (-> obj data))
  (dotimes (s5-0 (-> obj length))
    (format #t "~T  [~D] ~A~%" s5-0 (-> obj data s5-0))
    )
  obj
  )

(defmethod login prototype-tie ((obj prototype-tie))
  (dotimes (s5-0 (-> obj length))
    (login (-> obj data s5-0))
    )
  obj
  )

(defmethod mem-usage drawable-tree-instance-tie ((obj drawable-tree-instance-tie) (arg0 memory-usage-block) (arg1 int))
  (set! (-> arg0 length) (max 1 (-> arg0 length)))
  (set! (-> arg0 data 0 name) (symbol->string 'drawable-group))
  (+! (-> arg0 data 0 count) 1)
  (let ((v1-7 32))
    (+! (-> arg0 data 0 used) v1-7)
    (+! (-> arg0 data 0 total) (logand -16 (+ v1-7 15)))
    )
  (dotimes (s3-0 (-> obj length))
    (mem-usage (-> obj data s3-0) arg0 arg1)
    )
  (mem-usage (-> obj prototypes prototype-array-tie) arg0 (logior arg1 1))
  obj
  )

(defmethod mem-usage tie-fragment ((obj tie-fragment) (arg0 memory-usage-block) (arg1 int))
  (when (logtest? arg1 2)
    (let ((v1-3 (* (-> obj color-count) 4))
          (a0-2 (cond
                  ((logtest? arg1 4)
                   20
                   )
                  ((logtest? arg1 8)
                   21
                   )
                  (else
                    22
                    )
                  )
                )
          )
      (+! (-> arg0 data a0-2 count) 1)
      (+! (-> arg0 data a0-2 used) v1-3)
      (+! (-> arg0 data a0-2 total) (logand -4 (+ v1-3 3)))
      )
    (set! (-> arg0 length) (max 23 (-> arg0 length)))
    (set! obj obj)
    (goto cfg-13)
    )
  (set! (-> arg0 length) (max 18 (-> arg0 length)))
  (set! (-> arg0 data 9 name) "tie-fragment")
  (set! (-> arg0 data 10 name) "tie-gif")
  (set! (-> arg0 data 11 name) "tie-points")
  (set! (-> arg0 data 12 name) "tie-colors")
  (set! (-> arg0 data 14 name) "tie-debug")
  (set! (-> arg0 data 13 name) "tie-draw-points")
  (set! (-> arg0 data 17 name) "tie-generic")
  (+! (-> arg0 data 9 count) 1)
  (let ((v1-21 (asize-of obj)))
    (+! (-> arg0 data 9 used) v1-21)
    (+! (-> arg0 data 9 total) (logand -16 (+ v1-21 15)))
    )
  (let ((v1-26 (* (-> obj gif-count) 16)))
    (+! (-> arg0 data 10 count) (-> obj tex-count))
    (+! (-> arg0 data 10 used) v1-26)
    (+! (-> arg0 data 10 total) (logand -16 (+ v1-26 15)))
    )
  (let ((v1-31 (* (-> obj vertex-count) 16)))
    (+! (-> arg0 data 11 count) (-> obj vertex-count))
    (+! (-> arg0 data 11 used) v1-31)
    (+! (-> arg0 data 11 total) (logand -16 (+ v1-31 15)))
    )
  (let ((v1-36 (* (-> obj dp-qwc) 16)))
    (+! (-> arg0 data 13 count) (* (-> obj dp-qwc) 16))
    (+! (-> arg0 data 13 used) v1-36)
    (+! (-> arg0 data 13 total) (logand -16 (+ v1-36 15)))
    )
  (let ((v1-41 (* (-> obj generic-count) 16)))
    (+! (-> arg0 data 17 count) 1)
    (+! (-> arg0 data 17 used) v1-41)
    (+! (-> arg0 data 17 total) (logand -16 (+ v1-41 15)))
    )
  (when (nonzero? (-> obj debug-lines))
    (dotimes (s4-0 (-> obj debug-lines length))
      (+!
        (-> arg0 data 14 count)
        (-> (the-as (pointer int32) (-> obj debug-lines s4-0)) 0)
        )
      (let ((v1-52 (asize-of (the-as basic (-> obj debug-lines s4-0)))))
        (+! (-> arg0 data 12 used) v1-52)
        (+! (-> arg0 data 12 total) (logand -16 (+ v1-52 15)))
        )
      )
    )
  (label cfg-13)
  obj
  )

(defmethod mem-usage instance-tie ((obj instance-tie) (arg0 memory-usage-block) (arg1 int))
  (set! (-> arg0 length) (max 19 (-> arg0 length)))
  (set! (-> arg0 data 18 name) "instance-tie")
  (+! (-> arg0 data 18 count) 1)
  (let ((v1-6 (asize-of obj)))
    (+! (-> arg0 data 18 used) v1-6)
    (+! (-> arg0 data 18 total) (logand -16 (+ v1-6 15)))
    )
  (when (nonzero? (-> obj error))
    (set! (-> arg0 length) (max 24 (-> arg0 length)))
    (set! (-> arg0 data 23 name) "instance-tie-colors*")
    (set! (-> arg0 data 19 name) "instance-tie-colors0")
    (set! (-> arg0 data 20 name) "instance-tie-colors1")
    (set! (-> arg0 data 21 name) "instance-tie-colors2")
    (set! (-> arg0 data 22 name) "instance-tie-colors3")
    (+! (-> arg0 data 23 count) 1)
    (let ((s3-0 (-> obj bucket-ptr)))
      (+
        (-> arg0 data 19 used)
        (-> arg0 data 20 used)
        (-> arg0 data 21 used)
        (-> arg0 data 22 used)
        )
      (dotimes (s2-0 4)
        (let ((a0-10 (-> s3-0 geometry s2-0)))
          (when (nonzero? a0-10)
            (let ((t9-1 (method-of-object a0-10 mem-usage))
                  (a1-2 arg0)
                  (v1-29 s2-0)
                  )
              (t9-1 a0-10 a1-2 (logior (logior (cond
                                                 ((= v1-29 1)
                                                  4
                                                  )
                                                 ((= v1-29 2)
                                                  8
                                                  )
                                                 ((= v1-29 3)
                                                  16
                                                  )
                                                 (else
                                                   0
                                                   )
                                                 )
                                               2
                                               )
                                       arg1
                                       )
                    )
              )
            )
          )
        )
      )
    )
  obj
  )

(defmethod mem-usage drawable-inline-array-instance-tie ((obj drawable-inline-array-instance-tie) (arg0 memory-usage-block) (arg1 int))
  (set! (-> arg0 length) (max 1 (-> arg0 length)))
  (set! (-> arg0 data 0 name) (symbol->string 'drawable-group))
  (+! (-> arg0 data 0 count) 1)
  (let ((v1-7 32))
    (+! (-> arg0 data 0 used) v1-7)
    (+! (-> arg0 data 0 total) (logand -16 (+ v1-7 15)))
    )
  (dotimes (s3-0 (-> obj length))
    (mem-usage (-> obj data s3-0) arg0 arg1)
    )
  obj
  )

(defmethod mem-usage prototype-tie ((obj prototype-tie) (arg0 memory-usage-block) (arg1 int))
  (set! (-> arg0 length) (max 1 (-> arg0 length)))
  (set! (-> arg0 data 0 name) (symbol->string 'drawable-group))
  (+! (-> arg0 data 0 count) 1)
  (let ((v1-7 32))
    (+! (-> arg0 data 0 used) v1-7)
    (+! (-> arg0 data 0 total) (logand -16 (+ v1-7 15)))
    )
  (dotimes (s3-0 (-> obj length))
    (mem-usage (-> obj data s3-0) arg0 arg1)
    )
  obj
  )

(defmethod asize-of prototype-tie ((obj prototype-tie))
  (the-as int (+ (-> prototype-tie size) (* (+ (-> obj length) -1) 64)))
  )